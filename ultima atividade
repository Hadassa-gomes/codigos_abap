CLASS  lcl_relatorio_vendas DEFINITION.
  PUBLIC SECTION.
    DATA: ref_alv TYPE REF TO cl_salv_table.

    METHODS:
      buscar_vendas,
      exibir_vendas.
ENDCLASS.

CLASS lcl_relatorio_vendas IMPLEMENTATION.

  METHOD buscar_vendas.

    " Tipos de tabelas
    TYPES: BEGIN OF ty_vbak,
             vbeln TYPE vbak-vbeln,
             erdat TYPE vbak-erdat,
             auart TYPE vbak-auart,
             vkorg TYPE vbak-vkorg,
             vtweg TYPE vbak-vtweg,
             spart TYPE vbak-spart,
           END OF ty_vbak.

    TYPES: BEGIN OF ty_vbap,
             vbeln TYPE vbap-vbeln,
             posnr TYPE vbap-posnr,
             charg TYPE vbap-charg,
           END OF ty_vbap.

    TYPES: BEGIN OF ty_vbpa,
             vbeln TYPE vbpa-vbeln,
             parvw TYPE vbpa-parvw,
             kunnr TYPE vbpa-kunnr,
           END OF ty_vbpa.

    DATA: lt_vbak TYPE TABLE OF ty_vbak,
          lt_vbap TYPE TABLE OF ty_vbap,
          lt_vbpa TYPE TABLE OF ty_vbpa.

    SELECT vbeln, erdat, auart, vkorg, vtweg, spart
      INTO TABLE @lt_vbak
      FROM vbak
      WHERE vbeln IN @so_vbeln.

    IF lt_vbak IS INITIAL.
      MESSAGE 'Nenhum documento de venda encontrado.' TYPE 'I'.
      RETURN.
    ENDIF.

    " Buscar itens do documento
    SELECT vbeln, posnr, charg
      INTO TABLE @lt_vbap
      FROM vbap
      FOR ALL ENTRIES IN @lt_vbak
      WHERE vbeln = @lt_vbak-vbeln.

    " Buscar parceiros (clientes)
    SELECT vbeln, parvw, kunnr
      INTO TABLE @lt_vbpa
      FROM vbpa
      FOR ALL ENTRIES IN @lt_vbak
      WHERE vbeln = @lt_vbak-vbeln.


    " Montar tabela final
    LOOP AT lt_vbak INTO DATA(ls_vbak).
      LOOP AT lt_vbap INTO DATA(ls_vbap) WHERE vbeln = ls_vbak-vbeln.

        CLEAR gs_vendas.
        gs_vendas-vbeln      = ls_vbak-vbeln.
        gs_vendas-erdat      = ls_vbak-erdat.
        gs_vendas-auart      = ls_vbak-auart.
        gs_vendas-vkorg      = ls_vbak-vkorg.
        gs_vendas-vtweg      = ls_vbak-vtweg.
        gs_vendas-spart      = ls_vbak-spart.

        gs_vendas-posnr = ls_vbap-posnr.
        gs_vendas-charg          = ls_vbap-charg.

        " Pegar cliente (parceiro função AG)
        READ TABLE lt_vbpa INTO DATA(ls_vbpa)
          WITH KEY vbeln = ls_vbak-vbeln
                   parvw = 'AG'. " AG = Cliente

        IF sy-subrc = 0.
          gs_vendas-kunnr = ls_vbpa-kunnr.
          gs_vendas-parvw = ls_vbpa-parvw.
        ENDIF.

        APPEND gs_vendas TO gt_vendas.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.

  METHOD exibir_vendas.

    TRY.
        cl_salv_table=>factory(
          IMPORTING r_salv_table = ref_alv
          CHANGING  t_table      = gt_vendas ).

        ref_alv->get_display_settings( )->set_striped_pattern( abap_true ).
        ref_alv->get_display_settings( )->set_list_header( 'Relatório de Vendas' ).

        ref_alv->get_columns( )->set_optimize( abap_true ).
        ref_alv->get_functions( )->set_all( abap_true ).

        " Renomear colunas
        DATA(lo_columns) = ref_alv->get_columns( ).

        DATA(lr_column) = lo_columns->get_column( 'VBELN' ).
        lr_column->set_short_text( 'Doc.Vendas').
        lr_column->set_medium_text( 'Documento de Vendas' ).
        lr_column->set_long_text( 'Número do Documento de Vendas' ).

        lr_column = lo_columns->get_column( 'ERDAT' ).
        lr_column->set_short_text( 'Data' ).
        lr_column->set_medium_text( 'Data do Documento' ).

        lr_column = lo_columns->get_column( 'AUART' ).
        lr_column->set_short_text( 'Tipo' ).
        lr_column->set_medium_text( 'Tipo do Documento' ).

        lr_column = lo_columns->get_column( 'VKORG' ).
        lr_column->set_short_text( 'Org.Vend' ).
        lr_column->set_medium_text( CONV #('Organização de Vendas') ).

        lr_column = lo_columns->get_column( 'VTWEG' ).
        lr_column->set_short_text( 'Canal' ).
        lr_column->set_medium_text( CONV #('Canal de Distribuição') ).

        lr_column = lo_columns->get_column( 'SPART' ).
        lr_column->set_short_text( 'Setor' ).
        lr_column->set_medium_text( 'Setor do Produto' ).

        lr_column = lo_columns->get_column( 'POSNR' ).
        lr_column->set_short_text( 'Item' ).
        lr_column->set_medium_text( 'Item do Documento' ).

        lr_column = lo_columns->get_column( 'CHARG' ).
        lr_column->set_short_text( 'Lote' ).
        lr_column->set_medium_text( 'Número do Lote' ).

        lr_column = lo_columns->get_column( 'PARVW' ).
        lr_column->set_short_text( 'Função' ).
        lr_column->set_medium_text( 'Função do Parceiro' ).

        lr_column = lo_columns->get_column( 'KUNNR' ).
        lr_column->set_short_text( 'Cliente' ).
        lr_column->set_medium_text( 'Código do Cliente' ).

        " Ordenar por número do documento de vendas (VBELN)
        DATA(lo_sorts) = ref_alv->get_sorts( ).
        lo_sorts->add_sort(
          columnname = 'VBELN'
          sequence   = if_salv_c_sort=>sort_up ).

        " Exibir o ALV
        ref_alv->display( ).

      CATCH cx_salv_not_found cx_salv_data_error cx_salv_existing INTO DATA(lx_salv_specific).
        MESSAGE lx_salv_specific->get_text( ) TYPE 'E'.
      CATCH cx_salv_msg INTO DATA(lx_salv_general).
        MESSAGE lx_salv_general->get_text( ) TYPE 'E'.

    ENDTRY.

  ENDMETHOD.

ENDCLASS.
